notical-flashcards-starter/
â”œâ”€ README.md
â”œâ”€ requirements.txt
â”œâ”€ .env.example
â”œâ”€ docker-compose.yml                  # (later) Postgres/Qdrant/MinIO/Redis â€” optional
â”‚
â”œâ”€ app/
â”‚  â”œâ”€ __init__.py
â”‚  â”œâ”€ main.py                          # FastAPI bootstrap + routes mount
â”‚  â”œâ”€ config.py                        # env vars, paths, feature flags
â”‚  â”‚
â”‚  â”œâ”€ ingest.py                        # PDF/DOCX text extraction; image/audio stubs
â”‚  â”œâ”€ chunker.py                       # paragraph/semantic chunking (keeps math blocks intact)
â”‚  â”œâ”€ syllabus.py                      # syllabus tree + chunkâ†’topic mapping
â”‚  â”œâ”€ embeddings.py                    # vectorization (bge/e5) + helpers
â”‚  â”œâ”€ rag.py                           # (optional) retrieval from past papers/OER
â”‚  â”‚
â”‚  â”œâ”€ generator.py                     # ðŸ”‘ flashcard generation orchestrator (definition/cloze/MCQ/math)
â”‚  â”œâ”€ validators.py                    # dedup, grounding, MCQ checks, length/format
â”‚  â”œâ”€ math.py                          # LaTeX helpers, im2latex hooks, graph Qs
â”‚  â”œâ”€ srs.py                           # SM-2/FSRS scheduler + weak-area detection (self-learning loop)
â”‚  â”‚
â”‚  â”œâ”€ storage.py                       # JSON proto now; adapters for Postgres/MinIO/Qdrant later
â”‚  â”œâ”€ export.py                        # CSV (Anki), DOCX export, offline bundles
â”‚  â”‚
â”‚  â”œâ”€ llm.py                           # local LLM adapter (llama.cpp/TGI/vLLM) + prompt runner
â”‚  â”œâ”€ ocr.py                           # PaddleOCR/Tesseract wrappers
â”‚  â”œâ”€ asr.py                           # Whisper transcription wrappers
â”‚  â”‚
â”‚  â”œâ”€ prompts/                         # prompt templates (LLM-ready; easy to tweak)
â”‚  â”‚   â”œâ”€ definition_prompt.txt
â”‚  â”‚   â”œâ”€ cloze_prompt.txt
â”‚  â”‚   â”œâ”€ mcq_prompt.txt
â”‚  â”‚   â””â”€ math_prompt.txt
â”‚  â”‚
â”‚  â””â”€ utils/
â”‚      â”œâ”€ __init__.py
â”‚      â””â”€ text.py                      # small helpers (cleaning, sentence split, hashing)
â”‚
â”œâ”€ worker/
â”‚  â”œâ”€ __init__.py
â”‚  â””â”€ worker.py                        # job runner (Celery/RQ) â€” starts simple, can grow
â”‚
â”œâ”€ data/                               # local artifacts: uploaded docs, chunks, dev DB json
â”œâ”€ exports/                            # generated CSV/DOCX/offline bundles
â”‚
â””â”€ tests/
   â”œâ”€ __init__.py
   â”œâ”€ run_test.sh                      # curl script (PDF â†’ deck â†’ CSV)
   â”œâ”€ test_ingest.py
   â”œâ”€ test_generator.py
   â””â”€ test_validators.py
